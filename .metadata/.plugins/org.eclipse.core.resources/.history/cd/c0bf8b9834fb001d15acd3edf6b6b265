package com.skillstorm.services;

import java.util.List;
import java.util.Optional;

import javax.transaction.Transactional;

import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Service;

import com.skillstorm.dtos.ProductDto;
import com.skillstorm.dtos.RoomDto;
import com.skillstorm.dtos.UserDto;
import com.skillstorm.models.Category;
import com.skillstorm.models.Hotel;
import com.skillstorm.models.Product;
import com.skillstorm.models.Room;
import com.skillstorm.models.User;
import com.skillstorm.repositories.IHotelRepository;
import com.skillstorm.repositories.IRoomRepository;

@Service
@Transactional
public class RoomService {

	@Autowired
	private IRoomRepository roomRepository;
	@Autowired
	private IHotelRepository hotelRepository;
	
	public List<RoomDto> getAllRoomsInHotel(int hotelId){
		return roomRepository.findAllByHotelHotelId(hotelId)
				.stream()
				.map(room->room.toDto())
				.toList();
	}
	
	public RoomDto getRoomByRoomId(int roomId) {
		return roomRepository.findById(roomId)
				.orElseThrow()
				.toDto();
	}
public ProductDto updateProduct(ProductDto productData) {
		
		Optional<Product> optionalProduct =productRepository.findById(productData.getProductId());
		if (optionalProduct.isPresent()) {
		Product product= new Product();
		product.setProductId(productData.getProductId());
		product.setProductName(productData.getProductName());
		product.setPrice(productData.getPrice());
		
		System.out.println("Updating product ..."+product.getProductName()+product.getPrice()+productData.getCategoryId());
		
		Category category=categoryRepository
				.findById(productData.getCategoryId())
				.orElseThrow(()->new RuntimeException("Category not found"));
		
		System.out.println("Updating product after getting category..."+productData.getCategoryId());
		product.setCategory(category);
		System.out.println("product values "+product);
		return productRepository.save(product).toDto();
		}
		else {
			throw new RuntimeException("Inventory not found to update");
		}
	}
	
	public RoomDto updateRoom(RoomDto roomData) {
		
		//Get hotel by id
		Hotel hotel=hotelRepository.findById(roomData.getHotelId())
				.orElseThrow(()->new RuntimeException("Hotel not found"));
		
		if(hotel.isPresent()) {
			Room room=new Room();
			room.setRoomId(roomData.getRoomId());
			room.setRoomType(roomData.getRoomType());
			room.setRoomDescription(roomData.getRoomDescription());
		    room.setPrice(roomData.getPrice());
		    room.setAvailability(roomData.isAvailability());
		    room.setImageUrl(roomData.getImageUrl());
		    room.setHotel(hotel);
		    roomRepository.save(room);
		}
		
	}
}
